type User {
  name: String!
  email: String!
  adress: String
  codePost: String
  city: String
  phoneNumber: String
  role: Role!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  adress: String
  codePost: String
  phoneNumber: String
  role: Role!
}

input LoginUserInput {
  email: String!
  password: String!
}

input LogoutInput {
  allTokens: Boolean
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  allUsersByRole(role: Role): [User!]
  allUsersByEmail(email: String!): [User!]
}

type Mutation {
  createUser(data: CreateUserInput): User! @resolver(name: "create_user")
  loginUser(data: LoginUserInput): AuthPayload! @resolver(name: "login_user")
  logoutUser(data: LogoutInput): Boolean! @resolver(name: "logout_user")
}

enum Role {
  ROOT
  DEV
  CLIENT
  SUPER_CLIENT
}
